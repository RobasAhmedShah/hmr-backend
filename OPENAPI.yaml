openapi: 3.0.3
info:
  title: HMR Backend API
  description: API for managing real estate tokenization, organizations, users, investments, and wallet transactions.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server
tags:
  - name: Organizations
    description: Manage organizations (real estate developers).
  - name: Users (Admin)
    description: Admin-only endpoints for user management.
  - name: Properties
    description: Manage tokenized real estate properties.
  - name: Wallet
    description: Manage user wallets and balances.
  - name: Investments
    description: Manage user investments in properties.
  - name: Portfolio
    description: View detailed user investment portfolios.
  - name: Transactions
    description: View system-wide and user-specific transactions.
  - name: Payment Methods
    description: Manage user payment methods (cards, banks).
  - name: KYC
    description: Manage user KYC (Know Your Customer) verifications.
  - name: Rewards
    description: Manage and distribute ROI rewards.
  - name: Admin Dashboard & Analytics
    description: Comprehensive dashboard statistics and growth analytics with dynamic filtering.

paths:
  # ----------------------------------------------
  # Organizations
  # ----------------------------------------------
  /organizations:
    get:
      tags:
        - Organizations
      summary: List all organizations
      responses:
        '200':
          description: A list of all organizations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      tags:
        - Organizations
      summary: Create a new organization
      description: Creates a new organization with an auto-generated displayCode and initial liquidity of 0.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreate'
      responses:
        '201':
          description: The organization was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Get organization by ID
      description: Get organization by its UUID or displayCode (e.g., ORG-000001).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the organization.
      responses:
        '200':
          description: Organization details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found.
  /organizations/{id}/liquidity:
    get:
      tags:
        - Organizations
      summary: Get organization liquidity analytics
      description: Get liquidity analytics for a specific organization by its UUID or displayCode.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the organization.
      responses:
        '200':
          description: Organization liquidity details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationLiquidity'
  /organizations/{id}/transactions:
    get:
      tags:
        - Organizations
      summary: Get all transactions for an organization
      description: Get all transactions for an organization by its UUID or displayCode.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the organization.
      responses:
        '200':
          description: A list of transactions for the organization.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'

  # ----------------------------------------------
  # Users (Admin)
  # ----------------------------------------------
  /admin/users:
    get:
      tags:
        - Users (Admin)
      summary: List all users
      description: Get all users, optionally filtering by organization to show only investors in that organization's properties.
      parameters:
        - name: org
          in: query
          required: false
          schema:
            type: string
          description: Filter users by organization UUID or displayCode (e.g., ORG-000001). Returns only users who have invested in that organization's properties.
      responses:
        '200':
          description: A list of all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users (Admin)
      summary: Create a user
      description: Creates a user and auto-generates their Wallet, KYC (pending), and Portfolio records in a single transaction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: The user was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /admin/organizations:
    get:
      tags: [Organizations (Admin Management)]
      summary: List organizations with admin summaries
      responses:
        '200':
          description: A list of organizations with admin summary
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationWithAdminSummary'
    post:
      tags: [Organizations (Admin Management)]
      summary: Create organization with admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCreateOrganization'
      responses:
        '201':
          description: Organization and admin created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminCreateOrganizationResponse'

  /admin/organizations/{id}:
    patch:
      tags: [Organizations (Admin Management)]
      summary: Update organization
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateOrganization'
      responses:
        '200':
          description: Updated organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    delete:
      tags: [Organizations (Admin Management)]
      summary: Delete organization
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /admin/organizations/{id}/reset-password:
    post:
      tags: [Organizations (Admin Management)]
      summary: Reset organization admin password
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
      responses:
        '200':
          description: Reset result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'

  /org/auth/login:
    post:
      tags: [Organization Admin Auth]
      summary: Organization admin login (no JWT returned)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200':
          description: Login result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgAdminLoginResponse'

  /org/auth/change-password/{adminId}:
    patch:
      tags: [Organization Admin Auth]
      summary: Change organization admin password
      parameters:
        - name: adminId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword: { type: string }
                newPassword: { type: string }
      responses:
        '200':
          description: Change password result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }

  # ----------------------------------------------
  # Users (Direct Management)
  # ----------------------------------------------
  /users/{id}:
    patch:
      tags:
        - Users (Direct Management)
      summary: Update user fields dynamically
      description: Update user fields dynamically. You can update any field by passing the field name and its new value.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.

  # ----------------------------------------------
  # Properties
  # ----------------------------------------------
  /properties:
    get:
      tags:
        - Properties
      summary: List all properties
      description: Lists all properties, or filters by slug or displayCode.
      parameters:
        - name: slug
          in: query
          required: false
          schema:
            type: string
          description: Filter properties by slug.
        - name: displayCode
          in: query
          required: false
          schema:
            type: string
          description: Filter properties by displayCode (e.g., PROP-000001).
        - name: org
          in: query
          required: false
          schema:
            type: string
          description: Filter properties by organization UUID or displayCode (e.g., ORG-000001).
      responses:
        '200':
          description: A list of properties.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
    post:
      tags:
        - Properties
      summary: Create a property
      description: Creates a new property. Auto-computes pricePerTokenUSDT and sets availableTokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyCreate'
      responses:
        '201':
          description: The property was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
  /properties/{id}:
    get:
      tags:
        - Properties
      summary: Get property by ID
      description: Get property by its UUID or displayCode (e.g., PROP-000001).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the property.
      responses:
        '200':
          description: Property details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          description: Property not found.
    patch:
      tags:
        - Properties
      summary: Update property fields dynamically
      description: Update property fields dynamically. You can update any field by passing the field name and its new value.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the property.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyUpdate'
      responses:
        '200':
          description: Property updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          description: Property not found.
    delete:
      tags:
        - Properties
      summary: Delete a property
      description: Delete a property permanently by its UUID or displayCode.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the property.
      responses:
        '200':
          description: Property deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Property 'PROP-000001' has been deleted successfully"
        '404':
          description: Property not found.
  /properties/{id}/status:
    patch:
      tags:
        - Properties
      summary: Update property status
      description: Update property status only. Status can be any string value.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the property.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyStatusUpdate'
      responses:
        '200':
          description: Property status updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          description: Property not found.

  # ----------------------------------------------
  # Wallet
  # ----------------------------------------------
  /wallet:
    get:
      tags:
        - Wallet
      summary: List all wallets
      responses:
        '200':
          description: A list of all user wallets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
  /wallet/deposit:
    post:
      tags:
        - Wallet
      summary: Deposit USDT into wallet (Legacy)
      description: Directly credits a user's wallet. Requires verified KYC. Prefer using the /payment-methods/deposit endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The UUID or displayCode of the user.
                  example: USR-000001
                amountUSDT:
                  type: number
                  format: double
                  description: The amount of USDT to deposit.
                  example: 5000
              required:
                - userId
                - amountUSDT
      responses:
        '200':
          description: Deposit successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
  /wallet/user/{userId}:
    get:
      tags:
        - Wallet
      summary: Get wallet for a specific user
      description: Get wallet details for a user by their UUID or displayCode.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the user.
      responses:
        '200':
          description: Wallet details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '404':
          description: Wallet or user not found.
  /wallet/{id}:
    patch:
      tags:
        - Wallet
      summary: Update wallet fields dynamically
      description: Update wallet fields dynamically. You can update any field by passing the field name and its new value.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the wallet or user displayCode.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletUpdate'
      responses:
        '200':
          description: Wallet updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '404':
          description: Wallet not found.

  # ----------------------------------------------
  # Investments
  # ----------------------------------------------
  /investments:
    get:
      tags:
        - Investments
      summary: List all investments
      description: Get all investments, optionally filtering by user ID.
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Filter investments by user UUID or displayCode.
        - name: org
          in: query
          required: false
          schema:
            type: string
          description: Filter investments by organization UUID or displayCode (e.g., ORG-000001).
      responses:
        '200':
          description: A list of investments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Investment'
    post:
      tags:
        - Investments
      summary: Create investment (legacy amount-based)
      description: Creates an investment based on a USDT amount.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestmentCreateLegacy'
      responses:
        '201':
          description: Investment created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investment'
  /investments/invest:
    post:
      tags:
        - Investments
      summary: Create investment (new token-based)
      description: Creates an investment based on the number of tokens to buy. This is the preferred method.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestmentCreateToken'
      responses:
        '201':
          description: Investment created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investment'
  /investments/{id}:
    get:
      tags:
        - Investments
      summary: Get investment by ID
      description: Get a specific investment by its UUID or displayCode (e.g., INV-000001).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the investment.
      responses:
        '200':
          description: Investment details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investment'
        '404':
          description: Investment not found.

  /investments/analytics/user/{userId}:
    get:
      tags:
        - Investments
      summary: Get user investment analytics
      description: Get comprehensive investment analytics for a specific user including detailed investment list and sum analytics.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the user (e.g., USR-000001).
      responses:
        '200':
          description: User investment analytics with detailed breakdown.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvestmentAnalytics'
        '404':
          description: User not found.

  /investments/analytics/organization/{orgId}:
    get:
      tags:
        - Investments
      summary: Get organization investment analytics
      description: Get comprehensive investment analytics for a specific organization including all investments in their properties and sum analytics.
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the organization (e.g., ORG-000001).
      responses:
        '200':
          description: Organization investment analytics with detailed breakdown.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInvestmentAnalytics'
        '404':
          description: Organization not found.

  /investments/analytics/user/{userId}/organization/{orgId}:
    get:
      tags:
        - Investments
      summary: Get user-organization investment analytics
      description: Get comprehensive investment analytics for a specific user within a specific organization including detailed investment list and sum analytics.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the user (e.g., USR-000001).
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the organization (e.g., ORG-000001).
      responses:
        '200':
          description: User-organization investment analytics with detailed breakdown.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOrganizationInvestmentAnalytics'
        '404':
          description: User or organization not found.

  # ----------------------------------------------
  # Portfolio
  # ----------------------------------------------
  /portfolio/user/{userId}/detailed:
    get:
      tags:
        - Portfolio
      summary: Get comprehensive portfolio for a user
      description: Get a detailed, auto-updated portfolio for a user by their UUID or displayCode.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the user.
      responses:
        '200':
          description: Detailed user portfolio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDetailed'
        '404':
          description: User not found.

  # ----------------------------------------------
  # Transactions
  # ----------------------------------------------
  /transactions:
    get:
      tags:
        - Transactions
      summary: Get all transactions in the system
      responses:
        '200':
          description: An array of all transaction objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
  /transactions/user/{userId}:
    get:
      tags:
        - Transactions
      summary: Get all transactions for a specific user
      description: Get all transactions for a user by their UUID or displayCode.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the user.
      responses:
        '200':
          description: An array of transaction objects for the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '404':
          description: User not found.

  # ----------------------------------------------
  # Payment Methods
  # ----------------------------------------------
  /payment-methods:
    get:
      tags:
        - Payment Methods
      summary: Get all payment methods for a specific user
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the user.
      responses:
        '200':
          description: A list of payment methods for the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
    post:
      tags:
        - Payment Methods
      summary: Create a new payment method for a user
      description: Adds a new payment method (card or bank). Requires verified KYC.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodCreate'
      responses:
        '201':
          description: Payment method created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
  /payment-methods/{id}:
    get:
      tags:
        - Payment Methods
      summary: Get a specific payment method by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the payment method.
      responses:
        '200':
          description: Payment method details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
        '404':
          description: Payment method not found.
    delete:
      tags:
        - Payment Methods
      summary: Soft delete a payment method
      description: Soft deletes a payment method by setting its status to "disabled".
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the payment method.
      responses:
        '200':
          description: Payment method disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
  /payment-methods/{id}/verify:
    patch:
      tags:
        - Payment Methods
      summary: Verify a payment method
      description: Sets the status of a payment method to "verified" or "disabled".
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the payment method.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [verified, disabled]
                  example: verified
              required:
                - status
      responses:
        '200':
          description: Payment method status updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
  /payment-methods/{id}/default:
    patch:
      tags:
        - Payment Methods
      summary: Set a payment method as default
      description: Sets a payment method as default (or unsets it).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the payment method.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDefault:
                  type: boolean
                  example: true
              required:
                - isDefault
      responses:
        '200':
          description: Payment method default status updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
  /payment-methods/deposit:
    post:
      tags:
        - Payment Methods
      summary: Initiate a deposit using a payment method
      description: Initiates a deposit. Uses the default method if methodId is not provided. Requires verified KYC. Emits a wallet.deposit_initiated event.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodDeposit'
      responses:
        '200':
          description: Deposit initiated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Deposit initiated successfully
                  amount:
                    type: string
                    format: decimal
                    example: '1000'

  # ----------------------------------------------
  # KYC
  # ----------------------------------------------
  /kyc:
    get:
      tags:
        - KYC
      summary: List all KYC verifications
      responses:
        '200':
          description: A list of all KYC verifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KycVerification'
    post:
      tags:
        - KYC
      summary: Create or update KYC verification for a user
      description: Creates a new KYC verification or updates an existing one. If KYC already exists for the user, it will be updated with new information and status reset to "pending".
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KycCreate'
      responses:
        '201':
          description: KYC verification created or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycVerification'
  /kyc/user/{userId}:
    get:
      tags:
        - KYC
      summary: Get KYC verification for a specific user
      description: Get KYC verification for a user by their UUID or displayCode.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the user.
      responses:
        '200':
          description: KYC verification details with user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycVerificationWithUser'
        '404':
          description: KYC verification or user not found.
  /kyc/{id}:
    get:
      tags:
        - KYC
      summary: Get KYC verification by ID or user displayCode
      description: Get KYC verification by its UUID or by user displayCode. If a user displayCode is provided, returns the most recent KYC verification for that user.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the KYC verification or user displayCode (e.g., USR-000031).
      responses:
        '200':
          description: KYC verification details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycVerification'
        '404':
          description: KYC verification not found.
    patch:
      tags:
        - KYC
      summary: Update KYC verification fields dynamically
      description: Update KYC verification fields dynamically. You can update any field by passing the field name and its new value. When status is changed to "verified", it emits a kyc.verified event. The id can be either a KYC verification UUID or user displayCode.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the KYC verification or user displayCode (e.g., USR-000031).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KycUpdate'
      responses:
        '200':
          description: KYC verification updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycVerification'

  # ----------------------------------------------
  # Rewards
  # ----------------------------------------------
  /rewards:
    get:
      tags:
        - Rewards
      summary: List all rewards
      description: Get all rewards, optionally filtering by user ID.
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Filter rewards by user UUID or displayCode.
      responses:
        '200':
          description: A list of rewards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reward'
  /rewards/distribute:
    post:
      tags:
        - Rewards
      summary: Distribute ROI for a property
      description: Distributes ROI proportionally to all investors in a property. Creates one aggregated reward and transaction per user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewardDistribute'
      responses:
        '200':
          description: ROI distribution initiated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'ROI distribution for property <uuid> completed. 100000 USDT distributed to 2 users.'
  /rewards/{id}:
    get:
      tags:
        - Rewards
      summary: Get reward by ID
      description: Get a specific reward by its UUID or displayCode (e.g., RWD-000001).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The UUID or displayCode of the reward.
      responses:
        '200':
          description: Reward details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reward'
        '404':
          description: Reward not found.

  # ----------------------------------------------
  # Admin Dashboard & Analytics
  # ----------------------------------------------
  /admin/dashboard:
    get:
      tags:
        - Admin Dashboard & Analytics
      summary: Get comprehensive dashboard statistics
      description: Get comprehensive dashboard statistics with optional filtering by user, organization, or property.
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Filter by specific user (UUID or displayCode like USR-000001)
        - name: organizationId
          in: query
          required: false
          schema:
            type: string
          description: Filter by specific organization (UUID or displayCode like ORG-000001)
        - name: propertyId
          in: query
          required: false
          schema:
            type: string
          description: Filter by specific property (UUID or displayCode like PROP-000001)
      responses:
        '200':
          description: Dashboard statistics with comprehensive metrics.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformDashboard'
                  - $ref: '#/components/schemas/UserDashboard'
                  - $ref: '#/components/schemas/OrganizationDashboard'
                  - $ref: '#/components/schemas/PropertyDashboard'
  /admin/analytics:
    get:
      tags:
        - Admin Dashboard & Analytics
      summary: Get growth metrics and time-series analytics
      description: Get growth metrics and time-series analytics with optional filtering and time periods.
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            enum: ['7d', '30d', '90d', '1y']
          description: Fixed time period for analytics
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Custom date range start (ISO 8601)
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Custom date range end (ISO 8601)
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Filter by user (UUID or displayCode)
        - name: organizationId
          in: query
          required: false
          schema:
            type: string
          description: Filter by organization (UUID or displayCode)
        - name: propertyId
          in: query
          required: false
          schema:
            type: string
          description: Filter by property (UUID or displayCode)
      responses:
        '200':
          description: Growth metrics and time-series analytics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'

# ----------------------------------------------
# Reusable Components
# ----------------------------------------------
components:
  schemas:
    OrganizationWithAdminSummary:
      allOf:
        - $ref: '#/components/schemas/Organization'
        - type: object
          properties:
            admin:
              type: object
              nullable: true
              properties:
                email: { type: string }
                fullName: { type: string, nullable: true }
                lastLogin: { type: string, format: date-time, nullable: true }

    AdminCreateOrganization:
      type: object
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        website: { type: string, nullable: true }
        logoUrl: { type: string, nullable: true }
        adminEmail: { type: string, format: email, nullable: true }
        adminPassword: { type: string, nullable: true }
        adminFullName: { type: string, nullable: true }
      required: [name]

    AdminUpdateOrganization:
      type: object
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        website: { type: string, nullable: true }
        logoUrl: { type: string, nullable: true }

    AdminCreateOrganizationResponse:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
        admin:
          type: object
          properties:
            email: { type: string }
            tempPassword: { type: string }
            fullName: { type: string, nullable: true }
        message: { type: string }

    ResetPasswordResponse:
      type: object
      properties:
        email: { type: string }
        tempPassword: { type: string }

    OrgAdminLoginResponse:
      type: object
      properties:
        organizationId: { type: string }
        admin:
          type: object
          properties:
            id: { type: string }
            email: { type: string }
            fullName: { type: string, nullable: true }
    # ----------------------------------------------
    # ENTITIES
    # ----------------------------------------------
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayCode:
          type: string
          example: ORG-000001
        name:
          type: string
          example: HMR Builders
        description:
          type: string
          example: Leading real estate developer
        website:
          type: string
          format: uri
          example: https://hmrbuilders.com
        logoUrl:
          type: string
          format: uri
          example: https://example.com/logo.png
        liquidityUSDT:
          type: string
          format: decimal
          description: Total liquidity held by the organization.
          example: '250000.000000'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayCode:
          type: string
          example: USR-000001
        fullName:
          type: string
          example: Ali Khan
        email:
          type: string
          format: email
          example: ali@example.com
        phone:
          type: string
          example: '+92300123456'
        role:
          type: string
          enum: [user, admin]
          default: user
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Property:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayCode:
          type: string
          example: PROP-000001
        organizationId:
          type: string
          description: UUID or displayCode of the parent organization.
        title:
          type: string
          example: Marina View Residences
        slug:
          type: string
          example: marina-view-residences
        description:
          type: string
        type:
          type: string
          example: residential
        status:
          type: string
          enum: [active, pending, sold_out]
          example: active
        totalValueUSDT:
          type: string
          format: decimal
          example: '1000000.000000'
        totalTokens:
          type: string
          format: decimal
          example: '1000.000000'
        availableTokens:
          type: string
          format: decimal
          example: '996.250000'
        pricePerTokenUSDT:
          type: string
          format: decimal
          example: '1000.000000'
        expectedROI:
          type: number
          format: double
          example: 10
        city:
          type: string
          example: Karachi
        country:
          type: string
          example: Pakistan
        features:
          type: object
          example: { 'amenities': ['pool', 'gym'] }
        images:
          type: array
          items:
            type: string
            format: uri
          example: ['https://example.com/img1.jpg']
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Wallet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        balanceUSDT:
          type: string
          format: decimal
          example: '2750.000000'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Investment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayCode:
          type: string
          example: INV-000001
        userId:
          type: string
          format: uuid
        propertyId:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        amountUSDT:
          type: string
          format: decimal
          example: '2500.000000'
        tokensOwned:
          type: string
          format: decimal
          example: '2.500000'
        status:
          type: string
          enum: [confirmed, pending]
          example: confirmed
        createdAt:
          type: string
          format: date-time
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayCode:
          type: string
          example: TXN-000005
        type:
          type: string
          enum: [inflow, outflow, investment, reward, deposit, withdrawal]
          example: inflow
        fromEntity:
          type: string
          example: Ali Khan
        toEntity:
          type: string
          example: HMR Builders
        amountUSDT:
          type: string
          format: decimal
          example: '2500.000000'
        propertyId:
          type: string
          format: uuid
          nullable: true
        organizationId:
          type: string
          format: uuid
          nullable: true
        userId:
          type: string
          format: uuid
          nullable: true
        status:
          type: string
          enum: [completed, pending, failed]
          example: completed
        description:
          type: string
          example: Liquidity inflow from Ali Khan
        createdAt:
          type: string
          format: date-time
    Reward:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayCode:
          type: string
          example: RWD-000001
        userId:
          type: string
          format: uuid
        propertyId:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        amountUSDT:
          type: string
          format: decimal
          example: '250.000000'
        transactionId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    PaymentMethod:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [card, bank]
          example: card
        provider:
          type: string
          example: Visa
        status:
          type: string
          enum: [verified, pending, disabled]
          example: verified
        isDefault:
          type: boolean
          example: true
        cardDetails:
          $ref: '#/components/schemas/CardDetails'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CardDetails:
      type: object
      nullable: true
      properties:
        id:
          type: string
          format: uuid
        cardNumber:
          type: string
          example: '411111...1111'
        cardholderName:
          type: string
          example: John Doe
        expiryMonth:
          type: string
          example: '12'
        expiryYear:
          type: string
          example: '2025'
        cvv:
          type: string
          example: '***'
        cardType:
          type: string
          example: Visa
        cardCategory:
          type: string
          example: Credit
        billingAddress:
          type: string
        billingCity:
          type: string
        billingState:
          type: string
        billingPostalCode:
          type: string
        billingCountry:
          type: string
        issuingBank:
          type: string
          example: Chase Bank
        bankCode:
          type: string
          example: CHASE
        token:
          type: string
          example: tok_123456789
        isTokenized:
          type: boolean
          example: true
    PortfolioDetailed:
      type: object
      description: A comprehensive, auto-updating view of a user's portfolio.
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
            displayCode:
              type: string
            name:
              type: string
            email:
              type: string
              format: email
        summary:
          type: object
          properties:
            totalInvested:
              type: string
              format: decimal
            totalRewards:
              type: string
              format: decimal
            totalROI:
              type: number
              format: double
            activeInvestments:
              type: integer
        statistics:
          type: object
          properties:
            totalCurrentValue:
              type: string
              format: decimal
            netROI:
              type: string
              format: decimal
            averageROI:
              type: number
              format: double
        investments:
          type: array
          items:
            type: object
            description: Detailed investment info with property and organization context.
        rewardsHistory:
          type: array
          items:
            type: object
            description: History of rewards with property context.

    # ----------------------------------------------
    # KYC SCHEMAS
    # ----------------------------------------------
    KycVerification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [cnic, passport, license, other]
          example: cnic
        status:
          type: string
          enum: [pending, verified, rejected]
          example: pending
        documentFrontUrl:
          type: string
          format: uri
          example: https://example.com/front.jpg
        documentBackUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/back.jpg
        selfieUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/selfie.jpg
        reviewer:
          type: string
          nullable: true
          example: admin@example.com
        rejectionReason:
          type: string
          nullable: true
        metadata:
          type: object
          nullable: true
          example: { "additionalInfo": "Any additional verification data" }
        submittedAt:
          type: string
          format: date-time
          nullable: true
        reviewedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    KycVerificationWithUser:
      allOf:
        - $ref: '#/components/schemas/KycVerification'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
    KycCreate:
      type: object
      properties:
        userId:
          type: string
          description: User's UUID or displayCode.
          example: USR-000031
        type:
          type: string
          enum: [cnic, passport, license, other]
          example: cnic
        documentFrontUrl:
          type: string
          format: uri
          example: https://example.com/front.jpg
        documentBackUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/back.jpg
        selfieUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/selfie.jpg
        metadata:
          type: object
          nullable: true
          example: { "additionalInfo": "Any additional verification data" }
      required:
        - userId
        - type
        - documentFrontUrl
    KycUpdate:
      type: object
      description: Update KYC verification fields dynamically. All fields are optional.
      properties:
        type:
          type: string
          enum: [cnic, passport, license, other]
          example: passport
        status:
          type: string
          enum: [pending, verified, rejected]
          example: verified
        documentFrontUrl:
          type: string
          format: uri
          example: https://example.com/new-front.jpg
        documentBackUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/new-back.jpg
        selfieUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/new-selfie.jpg
        reviewer:
          type: string
          nullable: true
          example: admin@example.com
        rejectionReason:
          type: string
          nullable: true
        metadata:
          type: object
          nullable: true
          example: { "additionalInfo": "Updated verification data" }

    # ----------------------------------------------
    # REQUEST BODIES (CREATE)
    # ----------------------------------------------
    OrganizationCreate:
      type: object
      properties:
        name:
          type: string
          example: HMR Builders
        description:
          type: string
          example: Leading real estate developer
        website:
          type: string
          format: uri
          example: https://hmrbuilders.com
        logoUrl:
          type: string
          format: uri
          example: https://example.com/logo.png
      required:
        - name
    UserCreate:
      type: object
      properties:
        fullName:
          type: string
          example: Ali Khan
        email:
          type: string
          format: email
          example: ali@example.com
        phone:
          type: string
          example: '+92300123456'
        role:
          type: string
          enum: [user, admin]
          default: user
      required:
        - fullName
        - email
    UserUpdate:
      type: object
      description: Update user fields dynamically. All fields are optional.
      properties:
        fullName:
          type: string
          example: Updated Full Name
        email:
          type: string
          format: email
          example: updated@example.com
        phone:
          type: string
          example: "+923001234567"
        role:
          type: string
          enum: [user, admin]
          example: admin
        isActive:
          type: boolean
          example: false
    WalletUpdate:
      type: object
      description: Update wallet fields dynamically. All fields are optional.
      properties:
        balanceUSDT:
          type: number
          format: double
          example: 10000
        lockedUSDT:
          type: number
          format: double
          example: 500
        totalDepositedUSDT:
          type: number
          format: double
          example: 15000
        totalWithdrawnUSDT:
          type: number
          format: double
          example: 2000
    PropertyCreate:
      type: object
      properties:
        organizationId:
          type: string
          description: UUID or displayCode (e.g., ORG-000001).
          example: ORG-000001
        title:
          type: string
          example: Marina View Residences
        slug:
          type: string
          example: marina-view-residences
        description:
          type: string
          example: Luxury waterfront apartments
        type:
          type: string
          example: residential
        status:
          type: string
          enum: [active, pending]
          example: active
        totalValueUSDT:
          type: number
          format: double
          example: 1000000
        totalTokens:
          type: number
          format: double
          example: 1000
        expectedROI:
          type: number
          format: double
          example: 10
        city:
          type: string
          example: Karachi
        country:
          type: string
          example: Pakistan
        features:
          type: object
          example: { 'amenities': ['pool', 'gym'] }
        images:
          type: array
          items:
            type: string
            format: uri
          example: ['https://example.com/img1.jpg']
      required:
        - organizationId
        - title
        - slug
        - totalValueUSDT
        - totalTokens
    PropertyUpdate:
      type: object
      description: Update property fields dynamically. All fields are optional.
      properties:
        title:
          type: string
          example: Updated Property Title
        slug:
          type: string
          example: updated-property-slug
        description:
          type: string
          example: Updated description
        type:
          type: string
          enum: [residential, commercial, mixed]
          example: commercial
        status:
          type: string
          description: Can be any string value
          example: active
        totalValueUSDT:
          type: number
          format: double
          example: 1500000
        totalTokens:
          type: number
          format: double
          example: 1500
        availableTokens:
          type: number
          format: double
          example: 1200
        pricePerTokenUSDT:
          type: number
          format: double
          example: 1000
        expectedROI:
          type: number
          format: double
          example: 12.5
        city:
          type: string
          example: Lahore
        country:
          type: string
          example: Pakistan
        features:
          type: object
          example: { "amenities": ["pool", "gym", "parking"] }
        images:
          type: array
          items:
            type: string
            format: uri
          example: ["https://example.com/updated-img1.jpg"]
    PropertyStatusUpdate:
      type: object
      properties:
        status:
          type: string
          description: Can be any string value
          example: active
      required:
        - status
    InvestmentCreateLegacy:
      type: object
      properties:
        userId:
          type: string
          description: User's UUID or displayCode.
          example: USR-000001
        propertyId:
          type: string
          description: Property's UUID or displayCode.
          example: PROP-000001
        amountUSDT:
          type: number
          format: double
          example: 2500
      required:
        - userId
        - propertyId
        - amountUSDT
    InvestmentCreateToken:
      type: object
      properties:
        userId:
          type: string
          description: User's UUID or displayCode.
          example: USR-000001
        propertyId:
          type: string
          description: Property's UUID or displayCode.
          example: PROP-000001
        tokensToBuy:
          type: number
          format: double
          example: 2.5
      required:
        - userId
        - propertyId
        - tokensToBuy
    PaymentMethodCreate:
      type: object
      properties:
        userId:
          type: string
          description: User's UUID or displayCode.
          example: USR-000031
        type:
          type: string
          enum: [card, bank]
          example: card
        provider:
          type: string
          example: Visa
        isDefault:
          type: boolean
          example: true
        cardDetails:
          type: object
          description: Required only if type is 'card'.
          properties:
            cardNumber:
              type: string
              example: '4111111111111111'
            cardholderName:
              type: string
              example: John Doe
            expiryMonth:
              type: string
              example: '12'
            expiryYear:
              type: string
              example: '2025'
            cvv:
              type: string
              example: '123'
            cardType:
              type: string
              example: Visa
            cardCategory:
              type: string
              example: Credit
            billingAddress:
              type: string
              example: 123 Main Street
            billingCity:
              type: string
              example: New York
            billingState:
              type: string
              example: NY
            billingPostalCode:
              type: string
              example: '10001'
            billingCountry:
              type: string
              example: United States
            issuingBank:
              type: string
              example: Chase Bank
            bankCode:
              type: string
              example: CHASE
            token:
              type: string
              example: tok_123456789
            isTokenized:
              type: boolean
              example: true
      required:
        - userId
        - type
        - provider
    PaymentMethodDeposit:
      type: object
      properties:
        userId:
          type: string
          description: User's UUID or displayCode.
          example: USR-000031
        amountUSDT:
          type: number
          format: double
          example: 1000
        methodId:
          type: string
          format: uuid
          description: Specific payment method UUID. If omitted, the user's default method is used.
          nullable: true
      required:
        - userId
        - amountUSDT
    RewardDistribute:
      type: object
      properties:
        propertyId:
          type: string
          description: Property's UUID or displayCode.
          example: PROP-000001
        totalRoiUSDT:
          type: number
          format: double
          example: 100000
      required:
        - propertyId
        - totalRoiUSDT

    # ----------------------------------------------
    # RESPONSE-ONLY
    # ----------------------------------------------
    OrganizationLiquidity:
      type: object
      properties:
        organizationId:
          type: string
          example: ORG-000001
        organizationName:
          type: string
          example: HMR Builders
        liquidityUSDT:
          type: string
          format: decimal
          example: '250000.000000'
        lastUpdated:
          type: string
          format: date-time

    # ----------------------------------------------
    # DASHBOARD & ANALYTICS SCHEMAS
    # ----------------------------------------------
    PlatformDashboard:
      type: object
      description: Platform-wide dashboard statistics
      properties:
        overview:
          type: object
          properties:
            totalUsers:
              type: integer
              example: 150
            activeUsers:
              type: integer
              example: 142
            totalOrganizations:
              type: integer
              example: 5
            totalProperties:
              type: integer
              example: 25
            totalInvestments:
              type: integer
              example: 89
            totalInvestmentValue:
              type: string
              format: decimal
              example: "1250000.00"
            totalTransactions:
              type: integer
              example: 234
            totalTransactionVolume:
              type: string
              format: decimal
              example: "1500000.00"
            platformRevenue:
              type: string
              format: decimal
              example: "250000.00"
            totalRewardsDistributed:
              type: string
              format: decimal
              example: "45000.00"
        users:
          type: object
          properties:
            total:
              type: integer
            active:
              type: integer
            inactive:
              type: integer
            newThisMonth:
              type: integer
        kyc:
          type: object
          properties:
            pending:
              type: integer
            verified:
              type: integer
            rejected:
              type: integer
        properties:
          type: object
          properties:
            active:
              type: integer
            soldout:
              type: integer
            construction:
              type: integer
            total:
              type: integer
        investments:
          type: object
          properties:
            count:
              type: integer
            totalValue:
              type: string
              format: decimal
            averageInvestment:
              type: string
              format: decimal
        transactions:
          type: object
          properties:
            count:
              type: integer
            totalVolume:
              type: string
              format: decimal
            byType:
              type: object
              properties:
                deposit:
                  type: integer
                investment:
                  type: integer
                reward:
                  type: integer
                withdrawal:
                  type: integer
                inflow:
                  type: integer
        recentActivity:
          type: object
          properties:
            recentInvestments:
              type: array
              items:
                $ref: '#/components/schemas/Investment'
            recentTransactions:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
            recentUsers:
              type: array
              items:
                $ref: '#/components/schemas/User'
            pendingKycReviews:
              type: array
              items:
                $ref: '#/components/schemas/KycVerification'

    UserDashboard:
      type: object
      description: User-specific dashboard statistics
      properties:
        user:
          $ref: '#/components/schemas/User'
        wallet:
          type: object
          properties:
            id:
              type: string
              format: uuid
            balanceUSDT:
              type: string
              format: decimal
            lockedUSDT:
              type: string
              format: decimal
            totalDepositedUSDT:
              type: string
              format: decimal
            totalWithdrawnUSDT:
              type: string
              format: decimal
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        kyc:
          type: object
          properties:
            id:
              type: string
              format: uuid
            type:
              type: string
            status:
              type: string
            submittedAt:
              type: string
              format: date-time
            reviewedAt:
              type: string
              format: date-time
              nullable: true
            rejectionReason:
              type: string
              nullable: true
        investments:
          type: object
          properties:
            recent:
              type: array
              items:
                $ref: '#/components/schemas/Investment'
            totalValue:
              type: string
              format: decimal
            count:
              type: integer
        rewards:
          type: object
          properties:
            recent:
              type: array
              items:
                $ref: '#/components/schemas/Reward'
            totalAmount:
              type: string
              format: decimal
            count:
              type: integer
        transactions:
          type: object
          properties:
            recent:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
            totalVolume:
              type: string
              format: decimal
            count:
              type: integer
        paymentMethods:
          type: object
          properties:
            methods:
              type: array
              items:
                $ref: '#/components/schemas/PaymentMethod'
            verifiedCount:
              type: integer
            totalCount:
              type: integer
        portfolio:
          type: object
          properties:
            totalInvested:
              type: string
              format: decimal
            activeInvestments:
              type: integer
            totalEarned:
              type: string
              format: decimal
            totalROI:
              type: string
              format: decimal
            lastUpdated:
              type: string
              format: date-time

    OrganizationDashboard:
      type: object
      description: Organization-specific dashboard statistics
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
        properties:
          type: object
          properties:
            recent:
              type: array
              items:
                $ref: '#/components/schemas/Property'
            total:
              type: integer
            active:
              type: integer
            soldout:
              type: integer
        investments:
          type: object
          properties:
            recent:
              type: array
              items:
                $ref: '#/components/schemas/Investment'
            totalValue:
              type: string
              format: decimal
            count:
              type: integer
        transactions:
          type: object
          properties:
            recent:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
            totalVolume:
              type: string
              format: decimal
            count:
              type: integer
        liquidity:
          type: object
          properties:
            currentLiquidity:
              type: string
              format: decimal
            lastUpdated:
              type: string
              format: date-time
        investors:
          type: object
          properties:
            uniqueInvestors:
              type: integer
            totalInvestments:
              type: integer

    PropertyDashboard:
      type: object
      description: Property-specific dashboard statistics
      properties:
        property:
          allOf:
            - $ref: '#/components/schemas/Property'
            - type: object
              properties:
                organization:
                  $ref: '#/components/schemas/Organization'
        investments:
          type: object
          properties:
            recent:
              type: array
              items:
                $ref: '#/components/schemas/Investment'
            totalValue:
              type: string
              format: decimal
            count:
              type: integer
        transactions:
          type: object
          properties:
            recent:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
            totalVolume:
              type: string
              format: decimal
            count:
              type: integer
        investors:
          type: object
          properties:
            uniqueInvestors:
              type: integer
            totalInvestments:
              type: integer
        tokens:
          type: object
          properties:
            totalTokens:
              type: string
            availableTokens:
              type: string
            soldTokens:
              type: string
            pricePerToken:
              type: string
              format: decimal
            totalValue:
              type: string
              format: decimal
            soldValue:
              type: string
              format: decimal

    AnalyticsResponse:
      type: object
      description: Growth metrics and time-series analytics
      properties:
        period:
          type: object
          properties:
            from:
              type: string
              format: date-time
            to:
              type: string
              format: date-time
        timeSeries:
          type: object
          properties:
            users:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                  count:
                    type: integer
            investments:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                  count:
                    type: integer
                  volume:
                    type: string
                    format: decimal
            rewards:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                  count:
                    type: integer
                  amount:
                    type: string
                    format: decimal
            transactions:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                  count:
                    type: integer
                  volume:
                    type: string
                    format: decimal
            kycVerifications:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                  count:
                    type: integer
        aggregated:
          type: object
          properties:
            users:
              type: object
              properties:
                total:
                  type: integer
                average:
                  type: number
                  format: double
                peak:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                    count:
                      type: integer
            investments:
              type: object
              properties:
                total:
                  type: integer
                totalValue:
                  type: string
                  format: decimal
                average:
                  type: number
                  format: double
                peak:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                    count:
                      type: integer
                    volume:
                      type: string
                      format: decimal
            rewards:
              type: object
              properties:
                total:
                  type: integer
                totalAmount:
                  type: string
                  format: decimal
                average:
                  type: number
                  format: double
                peak:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                    count:
                      type: integer
                    amount:
                      type: string
                      format: decimal
            transactions:
              type: object
              properties:
                total:
                  type: integer
                totalVolume:
                  type: string
                  format: decimal
                average:
                  type: number
                  format: double
                peak:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                    count:
                      type: integer
                    volume:
                      type: string
                      format: decimal
        comparison:
          type: object
          properties:
            previousPeriod:
              type: object
              properties:
                users:
                  type: object
                  properties:
                    total:
                      type: integer
                    average:
                      type: number
                      format: double
                    peak:
                      type: object
                      nullable: true
                investments:
                  type: object
                  properties:
                    total:
                      type: integer
                    totalValue:
                      type: string
                      format: decimal
                    average:
                      type: number
                      format: double
                    peak:
                      type: object
                      nullable: true
                rewards:
                  type: object
                  properties:
                    total:
                      type: integer
                    totalAmount:
                      type: string
                      format: decimal
                    average:
                      type: number
                      format: double
                    peak:
                      type: object
                      nullable: true
                transactions:
                  type: object
                  properties:
                    total:
                      type: integer
                    totalVolume:
                      type: string
                      format: decimal
                    average:
                      type: number
                      format: double
                    peak:
                      type: object
                      nullable: true
            changePercentage:
              type: object
              properties:
                users:
                  type: number
                  format: double
                investments:
                  type: number
                  format: double
                rewards:
                  type: number
                  format: double
                transactions:
                  type: number
                  format: double

    # ----------------------------------------------
    # INVESTMENT ANALYTICS
    # ----------------------------------------------
    InvestmentAnalytics:
      type: object
      properties:
        totalInvestments:
          type: integer
          description: Total number of investments
          example: 5
        totalAmountUSDT:
          type: string
          format: decimal
          description: Sum of all investment amounts in USDT
          example: "12500.000000"
        totalTokensPurchased:
          type: string
          format: decimal
          description: Sum of all tokens purchased
          example: "12.500000"
        averageInvestmentAmount:
          type: string
          format: decimal
          description: Average investment amount per investment
          example: "2500.000000"
        averageTokensPerInvestment:
          type: string
          format: decimal
          description: Average tokens per investment
          example: "2.500000"
        totalExpectedROI:
          type: string
          format: decimal
          description: Sum of all expected ROI percentages
          example: "50.00"
        activeInvestments:
          type: integer
          description: Number of investments with active status
          example: 3
        completedInvestments:
          type: integer
          description: Number of investments with confirmed status
          example: 2
        pendingInvestments:
          type: integer
          description: Number of investments with pending status
          example: 0
        totalValueAtCurrentPrice:
          type: string
          format: decimal
          description: Current value of all tokens at current property prices
          example: "12500.000000"

    UserInvestmentAnalytics:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
            displayCode:
              type: string
              example: USR-000001
            fullName:
              type: string
              example: John Doe
            email:
              type: string
              format: email
              example: john@example.com
        investments:
          type: array
          items:
            $ref: '#/components/schemas/Investment'
        analytics:
          $ref: '#/components/schemas/InvestmentAnalytics'

    OrganizationInvestmentAnalytics:
      type: object
      properties:
        organization:
          type: object
          properties:
            id:
              type: string
              format: uuid
            displayCode:
              type: string
              example: ORG-000001
            name:
              type: string
              example: HMR Builders
        investments:
          type: array
          items:
            $ref: '#/components/schemas/Investment'
        analytics:
          $ref: '#/components/schemas/InvestmentAnalytics'

    UserOrganizationInvestmentAnalytics:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
            displayCode:
              type: string
              example: USR-000001
            fullName:
              type: string
              example: John Doe
            email:
              type: string
              format: email
              example: john@example.com
        organization:
          type: object
          properties:
            id:
              type: string
              format: uuid
            displayCode:
              type: string
              example: ORG-000001
            name:
              type: string
              example: HMR Builders
        investments:
          type: array
          items:
            $ref: '#/components/schemas/Investment'
        analytics:
          $ref: '#/components/schemas/InvestmentAnalytics'